/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package posa;

import javax.swing.JFileChooser;
import java.io.FileInputStream;
import java.io.IOException;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Connection;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.apache.poi.ss.usermodel.Row;

//import com.mysql.jdbc.Connection;
import com.mysql.jdbc.PreparedStatement;
import java.awt.Toolkit;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/**
 *
 * @author kimani kogi
 */
public class restore extends javax.swing.JFrame {
String students;
String books;
String tt;
String loaned;
String loanedcourse;
String libfines;
    /**
     * Creates new form restore
     */
    public restore() {
        initComponents();
         try
    {
     // selectname();
    }
    catch (Exception ex)
    {
      Logger.getLogger(restore.class.getName()).log(Level.SEVERE, null, ex);
    }
    methods n=new methods();
   String t= n.setTitle();
   this.setTitle(t);
    String i=n.setIconImage();
    this.setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getResource(i)));
    }
 public void selectname()
    throws Exception
  {
     methods m=new methods();
        Connection con = m.getConnection();
    Statement st2 = con.createStatement();
    
    ResultSet res7 = st2.executeQuery("SELECT name FROM reciept  ");
    while (res7.next()) {
      tt=(res7.getString("name"));
    }
    st2.close();
    res7.close();
    con.close();
  }
//  public java.sql.Connection getConnection()
//  {
//    java.sql.Connection con = null;
//    try
//    {
//      con = DriverManager.getConnection("jdbc:mysql://localhost:3306/library", "root", "123ERYcog.");
//    }
//    catch (Exception ex)
//    {
//      System.out.println(ex.getMessage());
//    }
//    return con;
//  }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jtfFileLocation = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jtfFileLocation1 = new javax.swing.JTextField();
        jtfFileLocation2 = new javax.swing.JTextField();
        jtfFileLocation3 = new javax.swing.JTextField();
        jButton3 = new javax.swing.JButton();
        jtfFileLocation4 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        DEBTORS = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        reciepts = new javax.swing.JTextField();
        invoicereciepts = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 153, 153));

        jButton1.setText("PRODUCTS");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("TRANSACTIONS");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jtfFileLocation3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfFileLocation3ActionPerformed(evt);
            }
        });

        jButton3.setText("SUPLIERS INVOICE");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("CREDITORS");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("CUSTOMER INVOICES");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("DEBTORS");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("RECIEPTS");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("INVOICE RECIEPTS");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jtfFileLocation4, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                    .addComponent(jtfFileLocation3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfFileLocation2)
                    .addComponent(jtfFileLocation, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfFileLocation1, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(DEBTORS)
                    .addComponent(invoicereciepts)
                    .addComponent(reciepts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfFileLocation)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 54, Short.MAX_VALUE)
                    .addComponent(jtfFileLocation1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtfFileLocation2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, 0)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfFileLocation3)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jtfFileLocation4)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 56, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                    .addComponent(DEBTORS))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                    .addComponent(reciepts))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, 45, Short.MAX_VALUE)
                    .addComponent(invoicereciepts))
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    jtfFileLocation.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    students=jtfFileLocation.getText();
    System.out.println(""+students+"");
} else {
    System.out.println("No Selection");
}
try{
             methods m=new methods();
             Connection con = m.getConnection();
              con.setAutoCommit(false);
            PreparedStatement pstm = null ;
             //PreparedStatement pstm1 = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+students+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String fname = row.getCell(1).getStringCellValue();
                String lname = row.getCell(2).getStringCellValue();
                String age = row.getCell(3).getStringCellValue();
                String bp = row.getCell(4).getStringCellValue();
                String from = row.getCell(5).getStringCellValue();
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                //String sql1="DROP TABLE IF EXISTS students";
                String sql = "INSERT INTO users VALUES('"+id+"','"+fname+"','"+lname+"','"+age+"','"+bp+"','"+from+"')";
              // pstm1=(PreparedStatement) con.prepareStatement(sql1);
                pstm = (PreparedStatement) con.prepareStatement(sql);
               //  pstm1.execute();
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            
            con.close();
            input.close();
            JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }

    

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jtfFileLocation3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfFileLocation3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtfFileLocation3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
                String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    jtfFileLocation1.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    books=jtfFileLocation1.getText();
    System.out.println(""+books+"");
} else {
    System.out.println("No Selection");
}
try{
             methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+books+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String fname = row.getCell(1).getStringCellValue();
                String lname = row.getCell(2).getStringCellValue();
                String updated_at = row.getCell(3).getStringCellValue();
                 String age = row.getCell(4).getStringCellValue();
                  String bp = row.getCell(5).getStringCellValue();
                
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                String sql = "INSERT INTO trans VALUES('"+id+"','"+fname+"','"+lname+"','"+updated_at+"','"+age+"','"+bp+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
             JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
            JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    jtfFileLocation2.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    loaned=jtfFileLocation2.getText();
    System.out.println(""+loaned+"");
} else {
    System.out.println("No Selection");
}
try{
            methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+loaned+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String iname = row.getCell(1).getStringCellValue();
                String product = row.getCell(2).getStringCellValue();
                String price_product = row.getCell(3).getStringCellValue();
               
                String total = row.getCell(4).getStringCellValue();
                String quantity = row.getCell(5).getStringCellValue();
                
                String updated_at = row.getCell(6).getStringCellValue();
             
                //String title = row.getCell(3).getStringCellValue();
              
                
                

                String sql = "INSERT INTO invoiced VALUES('"+id+"','"+iname+"','"+product+"','"+price_product+"','"+total+"',"
                        + "'"+quantity+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
              JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
            JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    jtfFileLocation3.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    loanedcourse=jtfFileLocation3.getText();
    System.out.println(""+loanedcourse+"");
} else {
    System.out.println("No Selection");
}
try{
             methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+loanedcourse+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String iname = row.getCell(1).getStringCellValue();
                String product = row.getCell(2).getStringCellValue();
                String price_product = row.getCell(3).getStringCellValue();
               
                String total = row.getCell(4).getStringCellValue();
                String quantity = row.getCell(5).getStringCellValue();
                
                String updated_at = row.getCell(6).getStringCellValue();
             
                //String title = row.getCell(3).getStringCellValue();
              
                
                

                String sql = "INSERT INTO credited VALUES('"+id+"','"+iname+"','"+product+"','"+price_product+"','"+total+"',"
                        + "'"+quantity+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
              JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
            JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
      String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    jtfFileLocation4.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    libfines=jtfFileLocation4.getText();
    System.out.println(""+libfines+"");
} else {
    System.out.println("No Selection");
}
try{
            methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+libfines+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String fname = row.getCell(1).getStringCellValue();
                String lname = row.getCell(2).getStringCellValue();
                 String age = row.getCell(3).getStringCellValue();
                String product = row.getCell(4).getStringCellValue();
                 String updated_at = row.getCell(5).getStringCellValue();
                
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                String sql = "INSERT INTO credits VALUES('"+id+"','"+fname+"','"+lname+"','"+age+"','"+product+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
             JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
             String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    DEBTORS.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    libfines=DEBTORS.getText();
    System.out.println(""+libfines+"");
} else {
    System.out.println("No Selection");
}
try{
            methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+libfines+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String fname = row.getCell(1).getStringCellValue();
                String lname = row.getCell(2).getStringCellValue();
                 String age = row.getCell(3).getStringCellValue();
                String product = row.getCell(4).getStringCellValue();
                 String updated_at = row.getCell(5).getStringCellValue();
                
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                String sql = "INSERT INTO debts VALUES('"+id+"','"+fname+"','"+lname+"','"+age+"','"+product+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
             JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
              String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    reciepts.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    libfines=reciepts.getText();
    System.out.println(""+libfines+"");
} else {
    System.out.println("No Selection");
}
try{
            methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+libfines+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String id =  row.getCell(0).getStringCellValue();
                String total = row.getCell(1).getStringCellValue();
                String invoiceno = row.getCell(2).getStringCellValue();
                 String updated_at = row.getCell(3).getStringCellValue();
                
                
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                String sql = "INSERT INTO recieptsale VALUES('"+id+"','"+total+"','"+invoiceno+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
             JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
                      String fileSeparator = System.getProperty("file.separator");
JFileChooser chooser = new JFileChooser();
//set JFileChooser default path
chooser.setCurrentDirectory(new java.io.File("."));
//set JFileChooser title
chooser.setDialogTitle("open");
//use as you need DIRECTORIES_ONLY, FILES_ONLY etc
chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
 
//false, if you want to view all kind of file type in JFileChooser
//true, if you want to create FileFilter and open only file type you want to be view in JFileChooser
chooser.setAcceptAllFileFilterUsed(false);
 
if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
    //write selected path inside JTextField
    invoicereciepts.setText(chooser.getSelectedFile().getPath()+fileSeparator);
    //students=getText(chooser.getSelectedFile().getPath()+fileSeparator);
    libfines=invoicereciepts.getText();
    System.out.println(""+libfines+"");
} else {
    System.out.println("No Selection");
}
try{
            methods m=new methods();
        Connection con = m.getConnection();
            con.setAutoCommit(false);
            PreparedStatement pstm = null ;
           // this.fileurlp = this.student.replace("\\", "\\\\");
            FileInputStream input = new FileInputStream(""+libfines+"");
            POIFSFileSystem fs = new POIFSFileSystem( input );
            HSSFWorkbook wb = new HSSFWorkbook(fs);
            HSSFSheet sheet = wb.getSheetAt(0);
            Row row;
            for(int i=1; i<=sheet.getLastRowNum(); i++){
                row = sheet.getRow(i);
                String name =  row.getCell(0).getStringCellValue();
                String total = row.getCell(1).getStringCellValue();
                String invoiceno = row.getCell(2).getStringCellValue();
                 String updated_at = row.getCell(3).getStringCellValue();
                
                
                
                //String imgurl =imgurlK.replace("\\", "\\\\");
                String sql = "INSERT INTO cinvoiced VALUES('"+name+"','"+total+"','"+invoiceno+"','"+updated_at+"')";
                pstm = (PreparedStatement) con.prepareStatement(sql);
                pstm.execute();
                System.out.println("Import rows "+i);
            }
            con.commit();
            pstm.close();
            con.close();
            input.close();
             JOptionPane.showMessageDialog(null, "Success import excel to mysql table"
               );
            System.out.println("Success import excel to mysql table");
        }catch(SQLException ex){
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
            System.out.println(ex);
        }catch(IOException ioe){
            System.out.println(ioe);
             JOptionPane.showMessageDialog(null, "error import excel to mysql table");
        }
    }//GEN-LAST:event_jButton8ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(restore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(restore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(restore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(restore.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new restore().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DEBTORS;
    private javax.swing.JTextField invoicereciepts;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jtfFileLocation;
    private javax.swing.JTextField jtfFileLocation1;
    private javax.swing.JTextField jtfFileLocation2;
    private javax.swing.JTextField jtfFileLocation3;
    private javax.swing.JTextField jtfFileLocation4;
    private javax.swing.JTextField reciepts;
    // End of variables declaration//GEN-END:variables
}
